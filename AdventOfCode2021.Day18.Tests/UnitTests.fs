module AdventOfCode2021.Day18.Tests

open System.IO
open AdventOfCode2021.Common
open AdventOfCode2021.Day18
open FsUnitTyped
open NUnit.Framework
open Swensen.Unquote

let getSample () =
    "
TODO
"
    |> String.splitLines
    |> Array.filter String.notNullOrEmpty

let getInputs () = "inputs.txt" |> File.ReadAllLines

[<Test>]
let ``1-1 Test part1 with sample`` () =
    (-1, (Solution.part1 (getSample ()))) ||> shouldEqual

[<Test>]
let ``1-2 Test part1 with inputs`` () =
    (-1, (Solution.part1 (getInputs ()))) ||> shouldEqual

[<Test>]
let ``2-1 Test part1 with sample`` () =
    (-1, (Solution.part2 (getSample ()))) ||> shouldEqual

[<Test>]
let ``2-2 Test part1 with inputs`` () =
    (-1, (Solution.part2 (getInputs ()))) ||> shouldEqual

[<Test>]
[<TestCase("1")>]
[<TestCase("[1,2]")>]
[<TestCase("[1,[2,3]]")>]
[<TestCase("[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]")>]
[<TestCase("[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]")>]
[<TestCase("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]")>]
let ``Check: parse`` s =
    test <@ ((Solution.parseNumber s) |> Solution.display) = s @>

//[<Test>]
//[<TestCase("[9,1]", 29)>]
//[<TestCase("[[9,1],[1,9]]", 129)>]
//[<TestCase("[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]", 4140)>]
//let ``Check magnitude`` s v =
//    test <@ s |> Solution.parseNumber |> Solution.getMagnitude = v @>

[<Test>]
[<TestCase(1, "[[[[[9,8],1],2],3],4]", "[[[[0,9],2],3],4]")>]
[<TestCase(2, "[7,[6,[5,[4,[3,2]]]]]", "[7,[6,[5,[7,0]]]]")>]
[<TestCase(3, "[[6,[5,[4,[3,2]]]],1]", "[[6,[5,[7,0]]],3]")>]
[<TestCase(4, "[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[7,0]]]]")>]
[<TestCase(5, "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[7,0]]]]")>]
[<TestCase(6, "[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]", "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]")>]
[<TestCase(7, "[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]", "[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]")>]
let ``Check: reduce`` _ before after =
    after |> Solution.parseNumber |> ignore

    test <@ before |> Solution.parseNumber |> Solution.reduce 1<Level> |> Solution.display = after @>

[<Test>]
[<TestCase(101, "[1,1]+[2,2]+[3,3]+[4,4]", "[[[[1,1],[2,2]],[3,3]],[4,4]]")>]
[<TestCase(102, "[1,1]+[2,2]+[3,3]+[4,4]+[5,5]", "[[[[3,0],[5,3]],[4,4]],[5,5]]")>]
[<TestCase(103, "[1,1]+[2,2]+[3,3]+[4,4]+[5,5]+[6,6]", "[[[[5,0],[7,4]],[5,5]],[6,6]]")>]

[<TestCase(104,
           "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]+[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
           "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]")>]
[<TestCase(105,
           "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]+[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
           "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]")>]
[<TestCase(106,
           "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]+[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]",
           "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]")>]
[<TestCase(107,
           "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]+[7,[5,[[3,8],[1,4]]]]",
           "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]")>]
[<TestCase(108,
           "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]+[[2,[2,2]],[8,[8,1]]]",
           "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]")>]
[<TestCase(109,
           "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]+[2,9]",
           "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]")>]
[<TestCase(110,
           "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]+[1,[[[9,3],9],[[9,0],[0,7]]]]",
           "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]")>]
[<TestCase(111,
           "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]+[[[5,[7,4]],7],1]",
           "[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]")>]
[<TestCase(112,
           "[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]+[[[[4,2],2],6],[8,7]]",
           "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]")>]
[<TestCase(113,
           "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]+[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]+[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]+[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]+[7,[5,[[3,8],[1,4]]]]+[[2,[2,2]],[8,[8,1]]]+[2,9]+[1,[[[9,3],9],[[9,0],[0,7]]]]+[[[5,[7,4]],7],1]+[[[[4,2],2],6],[8,7]]",
           "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]")>]
let ``Check: sum`` _ inputs expectedResult =
    let numbers =
        inputs |> String.split '+' |> Seq.map Solution.parseNumber |> Seq.toList

    test <@ Solution.sum numbers |> Solution.display = expectedResult @>

[<EntryPoint>]
let main _ = 0
